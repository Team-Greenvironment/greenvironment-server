"a directive to assign a complexity to a query field"
directive @complexity(
    "The complexity value for the field"
    value: Int!,

    "Optional multipliers"
    multipliers: [String!]
) on FIELD_DEFINITION

type Query {
    "returns the user object for a given user id or a handle (only one required)"
    getUser(userId: ID, handle: String): User

    "returns the logged in user"
    getSelf: Profile

    "returns the post object for a post id"
    getPost(postId: ID!): Post

    "returns the chat object for a chat id"
    getChat(chatId: ID!): ChatRoom

    "return shte group object for its id"
    getGroup(groupId: ID!): Group

    "returns the request object for its id"
    getRequest(requestId: ID!): Request

    "searches for users, groups, events, posts and returns a search result"
    search(query: String!, first: Int = 20, offset: Int = 0): SearchResult! @complexity(value: 1, multipliers: ["first"])

    "returns the post filtered by the sort type with pagination."
    getPosts(first: Int=20, offset: Int=0, sort: SortType = NEW): [Post!]! @complexity(value: 1, multipliers: ["first"])

    "returns all activities"
    getActivities: [Activity]

    "Returns an access token for the user that can be used in requests. To user the token in requests, it has to be set in the HTTP header 'Authorization' with the format Bearer <token>."
    getToken(email: String!, passwordHash: String!): Token!
}

type Mutation {
    "Accepts the usage of cookies."
    acceptCookies: Boolean

    "Login of the user. The passwordHash should be a sha512 hash of the password."
    login(email: String!, passwordHash: String!): Profile!

    "Registers the user."
    register(username: String, email: String, passwordHash: String): Profile!

    "Sets the user settings to the specified settings string. The settings parameter should be a valid yaml."
    setUserSettings(settings: String!): String!

    "Logout of the user."
    logout: Boolean

    "Upvote/downvote a Post"
    vote(postId: ID!, type: VoteType!): VoteResult

    "Report the post"
    report(postId: ID!): Boolean!

    "send a request"
    sendRequest(receiver: ID!, type: RequestType): Request

    "lets you accept a request for a given request id"
    acceptRequest(sender: ID!, type: RequestType): Boolean!

    "lets you deny a request for a given request id"
    denyRequest(sender: ID!, type: RequestType): Boolean!

    "removes a friend"
    removeFriend(friendId: ID!): Boolean!

    "send a message in a Chatroom"
    sendMessage(chatId: ID!, content: String!): ChatMessage

    "create a post that can belong to an activity"
    createPost(content: String!, activityId: ID): Post!

    "delete the post for a given post id"
    deletePost(postId: ID!): Boolean!

    "Creates a chat between the user (and optional an other user)"
    createChat(members: [ID!]): ChatRoom!

    "Creates a new group with a given name and additional members"
    createGroup(name: String!, members: [ID!]): Group!

    "Joins a group with the given id"
    joinGroup(id: ID!): Group

    "leaves the group with the given id"
    leaveGroup(id: ID!): Group

    "adds an admin to the group"
    addGroupAdmin(groupId: ID!, userId: ID!): Group

    "removes an admin from the group"
    removeGroupAdmin(groupId: ID!, userId: ID!): Group

    "Creates a new event with a epoch due date on a group."
    createEvent(name: String, dueDate: String, groupId: ID!): Event!

    "Joins a event."
    joinEvent(eventId: ID!): Event

    "Leaves a event."
    leaveEvent(eventId: ID!): Event

    "Creates an activity. Can only be used by admins."
    createActivity(name: String!, description: String!, points: Int!): Activity
}

interface UserData {
    "url for the Profile picture of the User"
    profilePicture: String

    "name of the User"
    name: String!

    "unique identifier name from the User"
    handle: String!

    "Id of the User"
    id: ID!

    "the number of posts the user has created"
    postCount: Int!

    "returns a given number of posts of a user"
    posts(first: Int=10, offset: Int=0): [Post!]! @complexity(value: 1, multipliers: ["first"])

    "creation date of the user account"
    joinedAt: String!

    "all friends of the user"
    friends(first: Int=10, offset: Int=0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "The number of friends the user has"
    friendCount: Int!

    "The groups the user has joined"
    groups(first: Int=10, offset: Int=0): [Group!]! @complexity(value: 1, multipliers: ["first"])

    "The number of groups the user has joined"
    groupCount: Int!

    "The events the user is participating in"
    events(first: Int=10, offset: Int=0): [Event!]! @complexity(value: 1, multipliers: ["first"])

    "The number of events the user is participating in"
    eventCount: Int!

    "the points of the user"
    points: Int!

    "the levels of the user depending on the points"
    level: Int!
}

"represents a single user account"
type User implements UserData{
    "url for the Profile picture of the User"
    profilePicture: String

    "name of the User"
    name: String!

    "unique identifier name from the User"
    handle: String!

    "Id of the User"
    id: ID!

    "the total number of posts the user posted"
    numberOfPosts: Int!

    "returns a given number of posts of a user"
    posts(first: Int=10, offset: Int): [Post!]! @complexity(value: 1, multipliers: ["first"])

    "the number of posts the user has created"
    postCount: Int!

    "creation date of the user account"
    joinedAt: String!

    "all friends of the user"
    friends(first: Int=10, offset: Int=0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "The number of friends the user has"
    friendCount: Int!

    "the points of the user"
    points: Int!

    "the groups the user has joined"
    groups(first: Int=10, offset: Int=0): [Group!]! @complexity(value: 1, multipliers: ["first"])

    "The numbef of groups the user has joined"
    groupCount: Int!

    "The events the user is participating in"
    events(first: Int=10, offset: Int=0): [Event!]! @complexity(value: 1, multipliers: ["first"])

    "The number of events the user is participating in"
    eventCount: Int!

    "the levels of the user depending on the points"
    level: Int!
}

type Profile implements UserData {
    "url for the Profile picture of the User"
    profilePicture: String

    "name of the User"
    name: String!

    "the email of the user"
    email: String!

    "returns the chatrooms the user joined."
    chats(first: Int=10, offset: Int): [ChatRoom] @complexity(value: 1, multipliers: ["first"])

    "the count of the users chats"
    chatCount: Int!

    "unique identifier name from the User"
    handle: String!

    "Id of the User"
    id: ID!

    "the total number of posts the user posted"
    numberOfPosts: Int!

    "the number of posts the user has created"
    postCount: Int!

    "returns a given number of posts of a user"
    posts(first: Int=10, offset: Int): [Post!]! @complexity(value: 1, multipliers: ["first"])

    "creation date of the user account"
    joinedAt: String!

    "all friends of the user"
    friends(first: Int=10, offset: Int=0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "The number of friends the user has"
    friendCount: Int!

    "all sent request for groupChats/friends/events"
    sentRequests: [Request!]!

    "all received request for groupChats/friends/events"
    receivedRequests: [Request!]!

    "all groups the user is an admin of"
    administratedGroups: [Group!]!

    "all groups the user has created"
    createdGroups: [Group!]!

    "all groups the user has joined"
    groups(first: Int=10, offset: Int=0): [Group!]! @complexity(value: 1, multipliers: ["first"])

    "The numbef of groups the user has joined"
    groupCount: Int!

    "The events the user is participating in"
    events(first: Int=10, offset: Int=0): [Event!]! @complexity(value: 1, multipliers: ["first"])

    "The number of events the user is participating in"
    eventCount: Int!

    "the points of the user"
    points: Int!

    "the levels of the user depending on the points"
    level: Int!

    "the custom settings for the frontend"
    settings: String!

    "if the user is an admin"
    isAdmin: Boolean
}

"represents a single user post"
type Post {

    "The id of the post."
    id: ID!

    "the text of the post"
    content: String

    "the content of the post rendered by markdown-it"
    htmlContent: String

    "upvotes of the Post"
    upvotes: Int!

    "downvotes of the Post"
    downvotes: Int!

    "the user that is the author of the Post"
    author: User!

    "date the post was created"
    createdAt: String!

    "the type of vote the user performed on the post"
    userVote(userId: ID): VoteType

    "if the post can be deleted by the specified user"
    deletable(userId: ID): Boolean!

    "the activity that belongs to the post"
    activity: Activity
}

"represents a request of any type"
type Request {

    "Id of the request."
    id: ID!

    "Id of the user who sended the request"
    sender: User!

    "Id of the user who received the request"
    receiver: User!

    "type of the request"
    type: RequestType!
}

"represents a chatroom"
type ChatRoom {
    "the socket.io namespace for the chatroom"
    namespace: String

    "the members of the chatroom"
    members(first: Int=10, offset: Int=0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "return a specfic range of messages posted in the chat"
    messages(first: Int = 10, offset: Int): [ChatMessage!]! @complexity(value: 1, multipliers: ["first"])

    "id of the chat"
    id: ID!
}

type ChatMessage {
    "Id of the chat message"
    id: ID!

    "The author of the chat message."
    author: User!

    "The chatroom the message was posted in"
    chat: ChatRoom!

    "The timestamp when the message was posted (epoch)."
    createdAt: String!

    "The content of the message."
    content: String!

    "The content of the message rendered by markdown-it."
    htmlContent: String
}

type Group {
    "ID of the group"
    id: ID!

    "name of the group"
    name: String!

    "the groups icon"
    picture: String

    "the creator of the group"
    creator: User!

    "all admins of the group"
    admins(first: Int=10, offset: Int=0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "the members of the group with pagination"
    members(first: Int = 10, offset: Int = 0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "the groups chat"
    chat: ChatRoom!

    "the events of the group"
    events(first: Int=10, offset: Int=0): [Event!]! @complexity(value: 1, multipliers: ["first"])

    "If the user with the specified id has joined the group"
    joined(userId: Int): Boolean!
}

type Event {
    "ID of the event"
    id: ID!

    "Name of the event"
    name: String!

    "The date of the event."
    dueDate: String!

    "The group the event belongs to."
    group: Group!

    "The participants of the event."
    participants(first: Int=10, offset: Int=0): [User!]! @complexity(value: 1, multipliers: ["first"])

    "Returns if the user with the specified id has joined the event"
    joined(userId: Int): Boolean
}

"respresents an access token entry with the value as the acutal token and expires as the date the token expires."
type Token {
    "The token itself."
    value: String!

    "The timestamp when the token expires."
    expires: String!
}

"The result of a search."
type SearchResult {
    "The users that were found in the search."
    users: [User!]!

    "The posts that were found in the search."
    posts: [Post!]!

    "The groups that were found in the search."
    groups: [Group!]!

    "The events that were found in the search."
    events: [Event!]!
}

"The result of voting on a post"
type VoteResult {

    "The type of vote that was performed"
    voteType: VoteType

    "The post the vote was performed on"
    post: Post!
}

"An activity that grants points"
type Activity {

    "the id of the activity"
    id: ID!

    "the name of the activity"
    name: String!

    "the description of the activity"
    description: String!

    "the number of points the activity grants"
    points: Int!
}

"represents the type of vote performed on a post"
enum VoteType {
    UPVOTE
    DOWNVOTE
}

"""
represents the type of request that the user has received
Currently on Friend Requests are implemented.
"""
enum RequestType {
    FRIENDREQUEST
    GROUPINVITE
    EVENTINVITE
}

enum SortType {
    TOP
    NEW
}
